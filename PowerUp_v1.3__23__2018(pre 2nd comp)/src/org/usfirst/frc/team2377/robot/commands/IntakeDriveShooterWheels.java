// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2377.robot.commands;

import org.usfirst.frc.team2377.robot.Robot;

import edu.wpi.first.wpilibj.command.Command;

public class IntakeDriveShooterWheels extends Command {
	private boolean waitingForSwitch = false;
	private int timeWaitingForMotors = 0;

	private static enum statetype {
		WAITINGFORSWITCH, LOOKFORSWITCH, WAITINGFORSWITCHTIMEOUT
	};

	private static statetype state;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public IntakeDriveShooterWheels() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.intake);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		timeWaitingForMotors = 0;
		state = statetype.WAITINGFORSWITCH;
	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		// TODO check if intake needs negative or positive values
		// TODO check for limit switch to stop motors
		// is joystick axis 2
		// System.out.println("We are in input execute");

		// RobotMap.driveSubsystemShooterWheels21.tankDrive(-Robot.oi.getManipulatorIntakeValue(),
		// -Robot.oi.getManipulatorIntakeValue());
		// FIXME check if true is off
		// switch (state) {
		// case WAITINGFORSWITCH:
		// runMotors();
		// timeWaitingForMotors++;
		// if (timeWaitingForMotors > 150) {
		// state = statetype.LOOKFORSWITCH;
		// timeWaitingForMotors = 0;
		// }
		// break;
		// case LOOKFORSWITCH:
		// if (RobotMap.intakeWheelsLimitSwitch.get() == false) {
		// state = statetype.WAITINGFORSWITCHTIMEOUT;
		// stopMotors();
		// } else {
		// runMotors();
		// // could replace runMotors with switch state
		// // state = statetype.WAITINGFORSWITCH;
		// }
		// break;
		// case WAITINGFORSWITCHTIMEOUT:
		// stopMotors();
		// timeWaitingForMotors++;
		// // add || Robot.oi.getManipulatorOuttakeValue() > 0
		// if (timeWaitingForMotors > 100 || Robot.oi.getManipulatorOuttakeValue() > 0)
		// {
		// state = statetype.WAITINGFORSWITCH;
		// }
		// }

		// back up (100% works)
		if (Robot.oi.getManipulatorIntakeValue() > 0) {
			Robot.driveShooterSubsystem.TankDrive(-Robot.oi.getManipulatorIntakeValue(),
					-Robot.oi.getManipulatorIntakeValue());

		} else if (Robot.oi.getManipulatorOuttakeValue() > 0) {
			Robot.driveShooterSubsystem.TankDrive(Robot.oi.getManipulatorOuttakeValue(),
					Robot.oi.getManipulatorOuttakeValue());

		} else {
			Robot.driveShooterSubsystem.TankDrive(0, 0);
		}

	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
	}

	private void runMotors() {
		if (Robot.oi.getManipulatorIntakeValue() > 0) {
			Robot.driveShooterSubsystem.TankDrive(Robot.oi.getManipulatorIntakeValue(),
					Robot.oi.getManipulatorIntakeValue());
		} else if (Robot.oi.getManipulatorOuttakeValue() > 0) {
			Robot.driveShooterSubsystem.TankDrive(-Robot.oi.getManipulatorOuttakeValue(),
					-Robot.oi.getManipulatorOuttakeValue());
		} else {
			Robot.driveShooterSubsystem.TankDrive(0, 0);
		}
	}

	// Robot.driveShooterSubsystem.TankDrive(-Robot.oi.getManipulatorIntakeValue(),
	// -Robot.oi.getManipulatorIntakeValue());
	private void stopMotors() {
		Robot.driveShooterSubsystem.TankDrive(0, 0);
	}
}
