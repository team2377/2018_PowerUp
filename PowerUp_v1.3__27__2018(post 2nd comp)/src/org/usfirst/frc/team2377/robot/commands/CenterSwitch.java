package org.usfirst.frc.team2377.robot.commands;

import org.usfirst.frc.team2377.robot.Robot;
import org.usfirst.frc.team2377.robot.subsystems.FmsSubSystem;

import edu.wpi.first.wpilibj.command.CommandGroup;

public class CenterSwitch extends CommandGroup {
	private double elevator_speed = .8;
	private double drive_speed = .7;// was.7
	private double turn_speed = .5;
	private boolean cube;

	// private Logging logger;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public CenterSwitch(boolean twoCubes) {
		cube = twoCubes;
		// logger.init("CenterSwitch");
		System.out
				.println("Entering center switch code, " + FmsSubSystem.getRightSwitchActive(Robot.switchScaleLayout));
		if (FmsSubSystem.getRightSwitchActive(Robot.switchScaleLayout)) {
			// addSequential(new SwitchOElGearO(true));

			// logger.info("The robot is going to the right switch", LocalDateTime.now());
			addSequential(new AutoOpenCloseGripper(true));// close
			System.out.println("past close gripper");
			addSequential(new AutoRotateArmOut());// out
			// addSequential(new AutoMoveElevator(Robot.RaiseElevatorSw, .7, 1)); worked as
			// sequential
			addParallel(new AutoMoveElevator(Robot.RaiseElevatorSw, 1, 1));// speed was .8
			addSequential(new DriveForward(Robot.autonLine, drive_speed));

			System.out.println("past close rotate arm");
			addSequential(new DriveForward(10, drive_speed));

			// addSequential(new AutoMoveElevator(Robot.RaiseElevatorSw, .7, 1));
			// addSequential(new DriveForward(20, drive_speed));
			// addSequential(new AutoOpenCloseGripper(false));// open
			// addSequential(new AutoRotateArmOut());// out

			addSequential(new AutoOutputDriveShooterWheels(.6));
			////// addSequential(new DriveBackward(10, -drive_speed));
			if (cube == true) {
				// FIXME code for 2 cubes
				// addSequential(new AutoMoveElevatorDown(.4, 1));
				addSequential(new DriveBackward(10, -drive_speed));
				addSequential(new AutoRotateLeft(Robot.RotateLeft, turn_speed));
				addSequential(new AutoOpenCloseGripper(false));// open
				addSequential(new DriveForward(Robot.C2RSw_Pyramid, drive_speed));
				addParallel(new AutoIntakeDriveShooterWheels());
				// addSequential(new AutoIntakeDriveShooterWheels());
			}

		} else {
			// logger.info("The robot is going to the left switch", LocalDateTime.now());
			// addSequential(new SwitchOElGearO(true));

			addSequential(new AutoOpenCloseGripper(true));// close
			addSequential(new AutoRotateArmOut());// out
			addSequential(new DriveForward(Robot.C2LSw_Leg_1, .8));
			addSequential(new AutoRotateLeft(Robot.RotateLeft, .65));
			addSequential(new DriveForward(Robot.C2LSw_Leg_2, .8));
			addParallel(new AutoMoveElevator(Robot.RaiseElevatorSw, 1, 1));
			addSequential(new AutoRotateRight(Robot.RotateRight, .65));
			addSequential(new DriveForward(Robot.C2LSw_Leg_3, drive_speed));
			// addParallel(new AutoMoveElevator(Robot.RaiseElevatorSw, .7, 1));
			// addSequential(new AutoMoveElevator(Robot.RaiseElevatorSw, .7, 1));
			// addParallel(new AutoMoveElevator(Robot.RaiseElevatorSw, .70, 1));

			// addSequential(new AutoOpenCloseGripper(false));// open
			addSequential(new AutoOutputDriveShooterWheels(.5));
			if (cube == true) {
				// FIXME code for 2 cubes
				addSequential(new DriveBackward(10, -drive_speed));
				addSequential(new AutoRotateRight(Robot.RotateRight, turn_speed));
				addSequential(new AutoOpenCloseGripper(false));// open
				addSequential(new DriveForward(Robot.C2LSw_Pyramid, drive_speed));
				addParallel(new AutoIntakeDriveShooterWheels());
				// addSequential(new AutoIntakeDriveShooterWheels());
			}
		}
		// logger.close();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	}
}
