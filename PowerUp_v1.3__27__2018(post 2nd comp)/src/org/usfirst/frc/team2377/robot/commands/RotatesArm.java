// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2377.robot.commands;

import org.usfirst.frc.team2377.robot.Robot;
import org.usfirst.frc.team2377.robot.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

public class RotatesArm extends Command {
	private boolean retractedMode = true;
	int rotateTimer = 0;

	// private static enum statetype {
	// LOOKINGFORBUTTON, MOVINGTOLIMIT
	// };

	// private static statetype state;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public RotatesArm() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		requires(Robot.driveShooterSubsystem);
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		retractedMode = true;
		// state = statetype.LOOKINGFORBUTTON;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		// TODO homie, figure out if the limit switch is true or false when closed
		// TODO homie, figure out which direction is positive and negative

		// switch (state) {
		// case LOOKINGFORBUTTON:
		// // RobotMap.driveSubsystemRotateArm.arcadeDrive(0, 0);
		// RobotMap.armMotor.set(0);
		// if (Robot.oi.manipulatorJoystick.getRawButton(RobotMap.CONTROLLER_X))// TODO
		// give alphabetical value
		// state = statetype.MOVINGTOLIMIT;
		// break;
		// case MOVINGTOLIMIT:
		// if (retractedMode == true) {
		// if (RobotMap.gripperDeployedLimitSwitch.get() == true || rotateTimer >= 150)
		// {
		// // RobotMap.driveSubsystemRotateArm.arcadeDrive(.5, 0);
		// rotateTimer += 1;
		// RobotMap.armMotor.set(.5);
		// } else {
		// // RobotMap.driveSubsystemRotateArm.arcadeDrive(0, 0);
		// RobotMap.armMotor.set(0);
		// rotateTimer = 0;
		// retractedMode = false;
		// state = statetype.LOOKINGFORBUTTON;
		// }
		// } else {
		// if (RobotMap.gripperStoredLimitSwitch.get() == true || rotateTimer >= 150) {
		// // RobotMap.driveSubsystemRotateArm.arcadeDrive(-.5, 0);
		// rotateTimer += 1;
		// RobotMap.armMotor.set(-.5);
		// } else {
		// // RobotMap.driveSubsystemRotateArm.arcadeDrive(0, 0);
		// RobotMap.armMotor.set(0);
		// rotateTimer = 0;
		// retractedMode = true;
		// state = statetype.LOOKINGFORBUTTON;
		// }
		// }
		// break;
		// }
		double direction = Robot.oi.getManipulatorRotatorValue();
		// deadzone
		// if (Robot.driveShooterSubsystem.() <= -.1 ||
		// Robot.driveShooterSubsystem.getAxisUsage() >= .1) {
		// RobotMap.armMotor.set(direction);
		// }
		if (Robot.oi.getManipulatorRotatorValue() <= -.55 || Robot.oi.getManipulatorRotatorValue() >= .55) {
			RobotMap.armMotor.set(direction);
		} else {
			RobotMap.armMotor.set(0);

		}
	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		// if(RobotMap.gripperDeployedLimitSwitch.get()==false) {
		// return true;
		// }
		return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
	}
}
