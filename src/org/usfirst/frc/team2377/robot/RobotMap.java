/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team2377.robot;

import com.ctre.phoenix.motorcontrol.can.*;
import com.ctre.phoenix.motorcontrol.*;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.RobotDrive;
//import edu.wpi.first.wpilibj.SD540;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Ultrasonic.Unit;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */

public class RobotMap {
	//PID
	public static AnalogInput m_potentiometer;
	public static SpeedController m_elevatorMotor;


	
	//6 wheel drive
	public static WPI_TalonSRX driveSystemleftFrontMotor;
    public static WPI_TalonSRX driveSystemleftRearMotor;
    public static WPI_TalonSRX driveSystemrightFrontMotor;
    public static WPI_TalonSRX driveSystemrightRearMotor;
    public static RobotDrive driveSystemRobotDrive41;
    public static WPI_TalonSRX driveSystemleftMiddleMotor;
    public static WPI_TalonSRX driveSystemrightMiddleMotor;
	public static RobotDrive driveSystemRobotDrive21;

    // gripper and arm rotator drive
    public static WPI_TalonSRX rightShooterWheelMotor;
    public static WPI_TalonSRX leftShooterWheelMotor;
    public static WPI_TalonSRX armMotor;
    public static RobotDrive driveSubsystemShooterWheels21;
    public static RobotDrive driveSubsystemRotateArm;
    
    // elevator drive subsystem
    public static WPI_TalonSRX elevatorMotor;
    public static RobotDrive driveSubsystemMoveElevator;
    
 // climber drive subsystem
    public static WPI_TalonSRX climberMotor;
    public static RobotDrive driveSubsystemMoveClimber;
    
    //sensors
    public static Encoder driveEncoder;
    public static final double encoderScaleFactor = 20.0683; 
    public static ADXRS450_Gyro driveADXR450Gyro;
    public static Solenoid openCloseGripper;
    public static Solenoid switchGear;
    
    public static DigitalInput gripperDeployedLimitSwitch; //gripper
    public static DigitalInput gripperStoredLimitSwitch;	//gripper
    public static DigitalInput elevatorTopLimitSwitch; 		//elevator
    public static DigitalInput elevatorBottomLimitSwitch;	//elevator
    
    
    //buttons
    public static final int DEPLOYGRIPPER = 3;
    public static final int  RAISECLIMBER = 1;
    public static final int  EXTENDCLIMBER = 4;
    public static final int OPENGRIPPERBUTTON = 5;
    public static final int CLOSEGRIPPERBUTTON = 6;
    public static final int LOWERELEVATOR = 2;
    //PID
    
    
    public static void init() {
    	 m_potentiometer = new AnalogInput(0);
         m_elevatorMotor = new Spark(0);
         
    	//CAN IDs 
    	//1 to 6 is drive base
    	// 7 and 8 is shooter
    	//9 is arm rotator
    	driveADXR450Gyro = new ADXRS450_Gyro();
    	driveSystemleftFrontMotor = new WPI_TalonSRX(1);
        LiveWindow.addActuator("driveSystem", "leftFrontMotor", (WPI_TalonSRX) driveSystemleftFrontMotor);
        driveSystemleftFrontMotor.setInverted(false);
        
        driveSystemleftRearMotor = new WPI_TalonSRX(3);
        LiveWindow.addActuator("driveSystem", "leftRearMotor", (WPI_TalonSRX) driveSystemleftRearMotor);
        driveSystemleftRearMotor.setInverted(false);
        
        driveSystemrightFrontMotor = new WPI_TalonSRX(4);
        LiveWindow.addActuator("driveSystem", "rightFrontMotor", (WPI_TalonSRX) driveSystemrightFrontMotor);
        driveSystemrightFrontMotor.setInverted(false);
        
        driveSystemrightRearMotor = new WPI_TalonSRX(6);
        LiveWindow.addActuator("driveSystem", "rightRearMotor", (WPI_TalonSRX) driveSystemrightRearMotor);
        driveSystemrightRearMotor.setInverted(false);
        
        driveSystemRobotDrive41 = new RobotDrive(driveSystemleftFrontMotor, driveSystemleftRearMotor,
              driveSystemrightFrontMotor, driveSystemrightRearMotor);
        
        driveSystemRobotDrive41.setSafetyEnabled(true);
        driveSystemRobotDrive41.setExpiration(0.1);
        driveSystemRobotDrive41.setSensitivity(0.5);
        driveSystemRobotDrive41.setMaxOutput(1.0);
        driveSystemRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveSystemRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        
        driveSystemleftMiddleMotor = new WPI_TalonSRX(2);
        LiveWindow.addActuator("driveSystem", "leftMiddleMotor", (WPI_TalonSRX) driveSystemleftMiddleMotor);
        driveSystemleftMiddleMotor.setInverted(false);
        
        driveSystemrightMiddleMotor = new WPI_TalonSRX(5);
        LiveWindow.addActuator("driveSystem", "rightMiddleMotor", (WPI_TalonSRX) driveSystemrightMiddleMotor);
        driveSystemrightMiddleMotor.setInverted(false);
        
        driveSystemRobotDrive21 = new RobotDrive(driveSystemleftMiddleMotor, driveSystemrightMiddleMotor);
        driveSystemRobotDrive21.setSafetyEnabled(true);
        driveSystemRobotDrive21.setExpiration(0.1);
        driveSystemRobotDrive21.setSensitivity(0.5);
        driveSystemRobotDrive21.setMaxOutput(1.0);
        driveSystemRobotDrive21.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        driveEncoder = new Encoder(0 , 1 , false, EncodingType.k4X);
        //driveEncoder.setDistancePerPulse(.0523598776*.945);// mobo encoder factor
        driveEncoder.setDistancePerPulse(.034906585);//encoder factor
        driveEncoder.setPIDSourceType(PIDSourceType.kRate);
        //TODO	check solenoid requirements 
        openCloseGripper= new Solenoid(3,0);
        switchGear= new Solenoid(3,0);
        //TODO Check Ports off limit switches
        //limit switches
         gripperDeployedLimitSwitch = new DigitalInput(1); 
         gripperStoredLimitSwitch = new  DigitalInput(0);
         elevatorTopLimitSwitch = new DigitalInput(2); 
         elevatorBottomLimitSwitch = new  DigitalInput(3);
        
        
        //  wheel shooter and rotator
        rightShooterWheelMotor = new WPI_TalonSRX(7);
        LiveWindow.addActuator("driveShooterSubsystem", "rightMotor", (WPI_TalonSRX) rightShooterWheelMotor);
        rightShooterWheelMotor.setInverted(false);
        leftShooterWheelMotor = new WPI_TalonSRX(8);
        LiveWindow.addActuator("driveShooterSubsystem", "leftMotor", (WPI_TalonSRX) leftShooterWheelMotor);
        leftShooterWheelMotor.setInverted(false);
        driveSubsystemShooterWheels21 = new RobotDrive(leftShooterWheelMotor, rightShooterWheelMotor);
        driveSubsystemShooterWheels21.setSafetyEnabled(true);
        driveSubsystemShooterWheels21.setExpiration(0.1);
        driveSubsystemShooterWheels21.setSensitivity(0.5);
        driveSubsystemShooterWheels21.setMaxOutput(1.0);
        driveSubsystemShooterWheels21.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        
        //deploy and retract
        armMotor = new WPI_TalonSRX(9);
        LiveWindow.addActuator("driveSubsystemrotatearm", "arm", (WPI_TalonSRX) armMotor);
        armMotor.setInverted(false);
        
        //climber
        climberMotor = new WPI_TalonSRX(10);
        LiveWindow.addActuator("driveSubsystemMoveClimber", "climber", (WPI_TalonSRX) climberMotor);
        climberMotor.setInverted(false);
        
        
    }
}
