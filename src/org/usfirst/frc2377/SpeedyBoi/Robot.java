// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2377.SpeedyBoi;

import org.usfirst.frc2377.SpeedyBoi.commands.*;
import org.usfirst.frc2377.SpeedyBoi.subsystems.DriveTrainSubsystem;
import org.usfirst.frc2377.SpeedyBoi.subsystems.FmsSubSystem;

import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 * 
 * jake paul loves the suicide forest
 */
//time for some tide pods
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    Preferences prefs;
    double dFred;
    public static double autonLine;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrainSubsystem driveTrainSubsystem;
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // TODO ensure field value is available at robot initialization
    public static String switchScaleLayout = "XXX";

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
   
        RobotMap.init();
        prefs=Preferences.getInstance();
        System.out.println("dFred about to read in");
        dFred=prefs.getDouble("Fred",0);
        autonLine=prefs.getDouble("autonLine",0);
        System.out.println("dFred read in");
        System.out.println(dFred);
        System.out.println(autonLine);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSubsystem = new DriveTrainSubsystem();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
    	Preferences.getInstance();
    	switchScaleLayout = FmsSubSystem.getSwitchAndScaleLayout(); // TODO ensure field value is available at robot initialization
        // switch
    	// Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    	System.out.println("Starting the auto chooser with FMS value of:" + switchScaleLayout);//printed the printline START HERE ON 1/20 TODO
    	chooser.addDefault("Autonomous Command", new CenterSwitch());
        chooser.addObject("Autonomous 2", new AutonomousMode2());
        chooser.addObject("Do nothing", new SpeedyBoiStop());
        chooser.addObject("Auton Line", new DrivePastAutonLine());
        chooser.addObject("Center Switch", new CenterSwitch());
        chooser.addObject("Right Scale / AutonLine", new RightPositionToRightScale(true));	//tests right scale then default is auto-line
        chooser.addObject("Left Scale / AutonLine", new LeftPositionToLeftScale(true));		//tests left scale then default is auto-line
        chooser.addObject("Right Switch / AutonLine", new RightPositionToRightSwitch(true));//tests right switch then default is auto-line
        chooser.addObject("Left Switch / AutonLine", new LeftPositionToLeftSwitch(true));	//tests left switch then default is auto-line

        //chooser.addObject("Center", new CenterSwitch());
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	
    	System.out.println("Entering autonomous init: " + switchScaleLayout);
        autonomousCommand = chooser.getSelected();
        System.out.println(autonomousCommand);
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        System.out.println("Leaving autonomous init");
    }
    

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Encoder value", RobotMap.driveEncoder.getDistance());
        SmartDashboard.putNumber("Gyro value", RobotMap.driveADXR450Gyro.getAngle());
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
